<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>KYEONG-SEOB SIM</title>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <link>http://localhost:9000/</link>
    <description>KyeongSeob Sim</description>
    <pubDate>Tue, 03 Apr 2018 08:18:46 +0900</pubDate>
    
      <item>
        <title>D-bus 명세 - 소개</title>
        <link>/%EB%B2%88%EC%97%AD/2018/03/20/d-bus-specification-introduction.html</link>
        <guid isPermaLink="true">/%EB%B2%88%EC%97%AD/2018/03/20/d-bus-specification-introduction.html</guid>
        <description>&lt;h2 id=&quot;소개&quot;&gt;소개&lt;/h2&gt;
&lt;p&gt;D-Bus 는 IPC 로 사용하기 쉽고, 비용이 적은 시스템입니다. 각각에 대해 좀 더 살펴보면, 다음과 같습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;D-Bus 는 아래와 같은 이유로, 비용이 적게 듭니다.
    &lt;ul&gt;
      &lt;li&gt;이진 프로토콜을 사용하고, XML 같은 text 형식으로 변환하거나 변환할 필요가 없습니다.&lt;/li&gt;
      &lt;li&gt;D-Bus 는 양방향 검증을 피하고, 비동기적인 실행이 가능하도록 설계되었습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;D-Bus 는 아래와 같은 이유로, 사용하기 쉽습니다.
    &lt;ul&gt;
      &lt;li&gt;D-Bus 는 바이트 스트림이 아닌 메시지 측면에서 동작합니다.&lt;/li&gt;
      &lt;li&gt;다루기 어려운 많은 IPC 문제들을 자동으로 처리합니다.&lt;/li&gt;
      &lt;li&gt;D-Bus 라이브러리는 IPC 를 위해 별도의 기술을 배우지 않아도 됩니다.
        &lt;ul&gt;
          &lt;li&gt;기존의 object/type 시스템을 그대로 사용할 수 있습니다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;기본 D-Bus 프로토콜은 “메시지 프로토콜” 섹션에서 명세된 1:1 프로토콜입니다.&lt;br /&gt;
즉, 하나의 어플리케이션이 다른 하나의 어플리케이션과 통신하기 위한 시스템입니다.&lt;br /&gt;
하지만, D-Bus 프로토콜의 주 목적은 “메시지 버스 명세”에 정의된 D-Bus 메시지 버스입니다.&lt;br /&gt;
메시지 버스는 여러 다른 어플리케이션들의 연결을 허용하고, 메시지를 다른 어플리케이션에 전달하는 특별한 어플리케이션입니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;D-Bus 를 사용하는 것은 시스템의 변경 사항에 대한 알림과 파일 모니터링 서비스나 설정 서비스와 desktop 환경 운영이 포함합니다.&lt;br /&gt;
D-bus 는 다음과 같은 두가지의 구체적인 사용 환경에 맞춰 설계됐습니다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;“System bus” 는 시스템에서 사용자 세션으로 알림을 주기 위해 사용됩니다.
    &lt;ul&gt;
      &lt;li&gt;그리고, 시스템이 사용자 세션에서 입력을 받게 할 수 있습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;“Session bus” 는 GNOME 이나 KDE 와 같은 desktop 환경을 위해 사용됩니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;D-Bus 는 모든 어플리케이션에 대한 범용 IPC 시스템을 목표로 하고 있지 않습니다.&lt;br /&gt;
그래서, 일부 다른 IPC 시스템에서 제공해주는 기능을 제공하지 않기도 합니다.&lt;br /&gt;
반대로, 다른 IPC 시스템에서 제공하지 않는 기능들을 제공하기도 합니다.&lt;br /&gt;
예를 들면, single-owner “bus names” 이나, on-demand 서비스 시작, 보안 정책등이 있습니다.&lt;br /&gt;
여러 관점에서 이런 기능들은 D-Bus 개발을 위한 핵심 동기가 됐습니다.&lt;br /&gt;
이 외의 다른 목적으로 IPC 를 사용한다면, 꼭 D-Bus 를 사용하지 않아도 됩니다.&lt;br /&gt;
주요 사용 사례를 벗어나는 기능의 경우, 향후 버전에서 제외 될 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;프로토콜-및-명세설계의-안정성&quot;&gt;프로토콜 및 명세(설계)의 안정성&lt;/h3&gt;
&lt;p&gt;D-Bus 프로토콜은 2006년 11월 8일자로 확정되었습니다.&lt;br /&gt;
현재는 호환성을 포함한 확장만 가능합니다.&lt;br /&gt;
하지만, 여기에 적힌 명세만으로는 D-Bus 의 레퍼런스 구현을 참조하지 않고, 상호 호환 가능한 라이브러리를 만들기는 어렵습니다.&lt;br /&gt;
그래서, 이 명세서는 1.0 으로 표시되지 않습니다.&lt;br /&gt;
이 명세를 1.0 으로 만들기 위해 우리는 명세서를 명확히 하고, 레퍼런스 구현 동작의 더 많은 측면을 다루기 위해  노력을 기울일 것입니다.&lt;/p&gt;

&lt;p&gt;이 작업이 완료될 때까지 D-Bus 를 사용한 라이브러리를 만들기 위해서는 레퍼런스의 구현을 살펴보거나, D-Bus 메일링 리스트로 질문을 해야할 것입니다.&lt;br /&gt;
명세에 대한 질문은 환영입니다.&lt;br /&gt;
문서가 완벽하지 않더라도, 이 문서는 유용한 시작점이 되어야 하고, 우리의 지식은 불완전할지라도 정확합니다.&lt;/p&gt;
</description>
        <pubDate>Tue, 20 Mar 2018 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>D-Bus 란?</title>
        <link>/2018/03/18/what-is-d-bus.html</link>
        <guid isPermaLink="true">/2018/03/18/what-is-d-bus.html</guid>
        <description>&lt;h2 id=&quot;what-is-d-bus&quot;&gt;What is D-Bus?&lt;/h2&gt;
&lt;p&gt;D-Bus 는 메시지 버스 시스템입니다. 이 녀석을 이용하면, 다른 어플리케이션과 간단하게 통신할 수 있습니다.&lt;br /&gt;
그리고, D-Bus 는 프로세스의 Life cycle 관리에도 사용됩니다.&lt;br /&gt;
예를 들어, 단일 인스턴스 어플리케이션이나 데몬 코드를 작성할 때, D-Bus 를 사용해서 쉽고 안정적으로 만들 수 있습니다.&lt;br /&gt;
On-demand 로 실행되는 어플리케이션이나 데몬을 실행할 때도 D-Bus 를 사용하면, 같은 효과를 얻을 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;D-Bus 는 두가지 데몬을 제공합니다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;System daemon (시스템 데몬)
    &lt;ul&gt;
      &lt;li&gt;“새로운 하드웨어 장치의 추가” 나 “프린트 큐의 변화” 등 시스템 이벤트를 처리하기 위한 용도입니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Per-user-login-session daemon (사용자 로그인 세션별 데몬)
    &lt;ul&gt;
      &lt;li&gt;사용자 어플리케이션 간의 일반적인 IPC 를 위한 용도입니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;그리고, D-Bus 의 메시지 버스는 일반적인 1:1 메시지 전달 프레임워크로 구축됩니다.&lt;br /&gt;
이런 프레임워크들은 따로 메시지 버스 데몬을 거치지 않아도, 두 개의 어플리케이션이 직접 통신할 수 있도록 해줍니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;D-Bus 의 &lt;a href=&quot;https://dbus.freedesktop.org/doc/api/html/index.html&quot;&gt;저수준 API 레퍼런스의 구현&lt;/a&gt;과 D-Bus &lt;a href=&quot;https://dbus.freedesktop.org/doc/dbus-specification.html&quot;&gt;프로토콜&lt;/a&gt;은 몇년 동안 실제 상황에서 혹독한 검증을 거쳐 완성됐습니다. &lt;br /&gt;
이후, 변경 사항에 대해서는 호환성을 유지하거나, 버전으로 구분할 예정입니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;저수준의 libdbus 레퍼런스 라이브러리는 의존성이 없습니다.&lt;br /&gt;
레퍼런스 버스 데몬의 의존성은 XML 파서 하나 뿐입니다.&lt;/p&gt;

&lt;p&gt;일부 고수준 라이브러리(Qt, Glib, etc)들은 몇개의 의존성을 가지고 있습니다.&lt;br /&gt;
하지만, 다양한 환경을 가정해서 만들어졌기 때문에 사용하기가 더 편리합니다.&lt;br /&gt;
저수준의 libdbus 로부터 파생된 고수준 라이브러리들은 잘다듬어져있고, ABI 에 대해 안정적입니다.&lt;/p&gt;

&lt;p&gt;C#, Java, Ruby 와 같은 여러 언어들에서도 D-Bus 프로토콜을 재구현한 라이브러리가 있습니다.&lt;br /&gt;
이 라이브러리들은 libdbus 의 레퍼런스를 사용하지 않습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;저수준으로 구현된 레퍼런스는 어플리케이션의 사용자를 중심으로 설계되지 않았습니다.&lt;br /&gt;
이는 고수준 라이브러리로 바인딩을 하기 위한 레퍼런스나 바인딩을 하는 사용자를 위해 작성됐습니다.&lt;br /&gt;
만약에 저수준 라이브러리와 고수준 라이브러리를 선택할 수 있다면, 고수준 라이브러리를 사용하는 것을 권장합니다.&lt;br /&gt;
고수준 라이브러리의 목록은 &lt;a href=&quot;https://www.freedesktop.org/wiki/Software/DBusBindings/&quot;&gt;bindings page&lt;/a&gt; 에서 찾을 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.freedesktop.org/wiki/Software/DbusProjects/&quot;&gt;D-Bus 를 사용하는 프로젝트의 리스트&lt;/a&gt;는 늘어나고 있고, 다양한 API 와 사용 방법들을 제공하고 있습니다.&lt;br /&gt;
D-Bus 는 Linux 나 Unix 계열에 이식성이 뛰어납니다. 그리고, Windows 로의 포팅은 진행중입니다.&lt;/p&gt;
</description>
        <pubDate>Sun, 18 Mar 2018 00:00:00 +0900</pubDate>
      </item>
    
  </channel>
</rss>